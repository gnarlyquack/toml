TEST(valid_inline_table_tests, test_key_dotted)
{
    const string toml("inline = {a.b = 42}\n\nmany.dots.here.dot.dot.dot = {a.b.c = 1, a.b.d = 2}\n\na = {   a.b  =  1   }\nb = {   \"a\".\"b\"  =  1   }\nc = {   a   .   b  =  1   }\nd = {   'a'   .   \"b\"  =  1   }\ne = {a.b=1}\n\n[tbl]\na.b.c = {d.e=1}\n\n[tbl.x]\na.b.c = {d.e=1}\n\n[[arr]]\nt = {a.b=1}\nT = {a.b=1}\n\n[[arr]]\nt = {a.b=2}\nT = {a.b=2}\n", 308);

    const Table expected = {{ std::string("a", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("arr", 3), Value(Array({Value(Table({{ std::string("T", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("t", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) }})),Value(Table({{ std::string("T", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(2)) }})) }})) },{ std::string("t", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(2)) }})) }})) }}))})) },{ std::string("b", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("c", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("d", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("e", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(1)) }})) }})) },{ std::string("inline", 6), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(INT64_C(42)) }})) }})) },{ std::string("many", 4), Value(Table({{ std::string("dots", 4), Value(Table({{ std::string("here", 4), Value(Table({{ std::string("dot", 3), Value(Table({{ std::string("dot", 3), Value(Table({{ std::string("dot", 3), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(INT64_C(1)) },{ std::string("d", 1), Value(INT64_C(2)) }})) }})) }})) }})) }})) }})) }})) }})) },{ std::string("tbl", 3), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(Table({{ std::string("d", 1), Value(Table({{ std::string("e", 1), Value(INT64_C(1)) }})) }})) }})) }})) },{ std::string("x", 1), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(Table({{ std::string("d", 1), Value(Table({{ std::string("e", 1), Value(INT64_C(1)) }})) }})) }})) }})) }})) }})) }};

    assert_parsed(toml, expected);
}
