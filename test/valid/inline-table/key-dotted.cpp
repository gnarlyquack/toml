TEST(valid_inline_table_tests, test_key_dotted)
{
    const string toml{"inline = {a.b = 42}\n\nmany.dots.here.dot.dot.dot = {a.b.c = 1, a.b.d = 2}\n\na = {   a.b  =  1   }\nb = {   \"a\".\"b\"  =  1   }\nc = {   a   .   b  =  1   }\nd = {   'a'   .   \"b\"  =  1   }\ne = {a.b=1}\n\n[tbl]\na.b.c = {d.e=1}\n\n[tbl.x]\na.b.c = {d.e=1}\n\n[[arr]]\nt = {a.b=1}\nT = {a.b=1}\n\n[[arr]]\nt = {a.b=2}\nT = {a.b=2}\n", 308};

    const Table expected{{ "a", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "arr", Value::of_array({Value::of_table({{ "T", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "t", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) }}),Value::of_table({{ "T", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(2ULL) }}) }}) },{ "t", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(2ULL) }}) }}) }})}) },{ "b", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "c", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "d", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "e", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(1ULL) }}) }}) },{ "inline", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_integer(42ULL) }}) }}) },{ "many", Value::of_table({{ "dots", Value::of_table({{ "here", Value::of_table({{ "dot", Value::of_table({{ "dot", Value::of_table({{ "dot", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_table({{ "c", Value::of_integer(1ULL) },{ "d", Value::of_integer(2ULL) }}) }}) }}) }}) }}) }}) }}) }}) },{ "tbl", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_table({{ "c", Value::of_table({{ "d", Value::of_table({{ "e", Value::of_integer(1ULL) }}) }}) }}) }}) },{ "x", Value::of_table({{ "a", Value::of_table({{ "b", Value::of_table({{ "c", Value::of_table({{ "d", Value::of_table({{ "e", Value::of_integer(1ULL) }}) }}) }}) }}) }}) }}) }};

    assert_parsed(toml, expected);
}
