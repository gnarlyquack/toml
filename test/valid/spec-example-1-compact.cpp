TEST(valid_tests, test_spec_example_1_compact)
{
    const string toml("#Useless spaces eliminated.\ntitle=\"TOML Example\"\n[owner]\nname=\"Lance Uppercut\"\ndob=1979-05-27T07:32:00-08:00#First class dates\n[database]\nserver=\"192.168.1.1\"\nports=[8001,8001,8002]\nconnection_max=5000\nenabled=true\n[servers]\n[servers.alpha]\nip=\"10.0.0.1\"\ndc=\"eqdc10\"\n[servers.beta]\nip=\"10.0.0.2\"\ndc=\"eqdc10\"\n[clients]\ndata=[[\"gamma\",\"delta\"],[1,2]]\nhosts=[\n\"alpha\",\n\"omega\"\n]\n", 376);

    const Table expected = {{ std::string("clients", 7), Value(Table({{ std::string("data", 4), Value(Array({Value(Array({Value(std::string("gamma", 5)),Value(std::string("delta", 5))})),Value(Array({Value(INT64_C(1)),Value(INT64_C(2))}))})) },{ std::string("hosts", 5), Value(Array({Value(std::string("alpha", 5)),Value(std::string("omega", 5))})) }})) },{ std::string("database", 8), Value(Table({{ std::string("connection_max", 14), Value(INT64_C(5000)) },{ std::string("enabled", 7), Value(true) },{ std::string("ports", 5), Value(Array({Value(INT64_C(8001)),Value(INT64_C(8001)),Value(INT64_C(8002))})) },{ std::string("server", 6), Value(std::string("192.168.1.1", 11)) }})) },{ std::string("owner", 5), Value(Table({{ std::string("dob", 3), Value(date::sys_days(date::year(1979) / date::month(5) / date::day(27)) + chrono::hours(15) + chrono::minutes(32) + chrono::seconds(0) + chrono::microseconds(0)) },{ std::string("name", 4), Value(std::string("Lance Uppercut", 14)) }})) },{ std::string("servers", 7), Value(Table({{ std::string("alpha", 5), Value(Table({{ std::string("dc", 2), Value(std::string("eqdc10", 6)) },{ std::string("ip", 2), Value(std::string("10.0.0.1", 8)) }})) },{ std::string("beta", 4), Value(Table({{ std::string("dc", 2), Value(std::string("eqdc10", 6)) },{ std::string("ip", 2), Value(std::string("10.0.0.2", 8)) }})) }})) },{ std::string("title", 5), Value(std::string("TOML Example", 12)) }};

    assert_parsed(toml, expected);
}
