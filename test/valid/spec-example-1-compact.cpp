TEST(valid_tests, test_spec_example_1_compact)
{
    const string toml{"#Useless spaces eliminated.\ntitle=\"TOML Example\"\n[owner]\nname=\"Lance Uppercut\"\ndob=1979-05-27T07:32:00-08:00#First class dates\n[database]\nserver=\"192.168.1.1\"\nports=[8001,8001,8002]\nconnection_max=5000\nenabled=true\n[servers]\n[servers.alpha]\nip=\"10.0.0.1\"\ndc=\"eqdc10\"\n[servers.beta]\nip=\"10.0.0.2\"\ndc=\"eqdc10\"\n[clients]\ndata=[[\"gamma\",\"delta\"],[1,2]]\nhosts=[\n\"alpha\",\n\"omega\"\n]\n", 376};

    const Table expected{{ "clients", Value::of_table({{ "data", Value::of_array({Value::of_array({Value::of_string("gamma"),Value::of_string("delta")}),Value::of_array({Value::of_integer(1ULL),Value::of_integer(2ULL)})}) },{ "hosts", Value::of_array({Value::of_string("alpha"),Value::of_string("omega")}) }}) },{ "database", Value::of_table({{ "connection_max", Value::of_integer(5000ULL) },{ "enabled", Value::of_boolean(true) },{ "ports", Value::of_array({Value::of_integer(8001ULL),Value::of_integer(8001ULL),Value::of_integer(8002ULL)}) },{ "server", Value::of_string("192.168.1.1") }}) },{ "owner", Value::of_table({{ "dob", Value::of_offset_datetime(date::sys_days(date::year(1979) / date::month(5) / date::day(27)) + chrono::hours(15) + chrono::minutes(32) + chrono::seconds(0) + chrono::microseconds(0)) },{ "name", Value::of_string("Lance Uppercut") }}) },{ "servers", Value::of_table({{ "alpha", Value::of_table({{ "dc", Value::of_string("eqdc10") },{ "ip", Value::of_string("10.0.0.1") }}) },{ "beta", Value::of_table({{ "dc", Value::of_string("eqdc10") },{ "ip", Value::of_string("10.0.0.2") }}) }}) },{ "title", Value::of_string("TOML Example") }};

    assert_parsed(toml, expected);
}
