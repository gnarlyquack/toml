TEST(valid_string_tests, test_escapes)
{
    const string toml("backspace = \"This string has a \\b backspace character.\"\ntab = \"This string has a \\t tab character.\"\nnewline = \"This string has a \\n new line character.\"\nformfeed = \"This string has a \\f form feed character.\"\ncarriage = \"This string has a \\r carriage return character.\"\nquote = \"This string has a \\\" quote character.\"\nbackslash = \"This string has a \\\\ backslash character.\"\nnotunicode1 = \"This string does not have a unicode \\\\u escape.\"\nnotunicode2 = \"This string does not have a unicode \\u005Cu escape.\"\nnotunicode3 = \"This string does not have a unicode \\\\u0075 escape.\"\nnotunicode4 = \"This string does not have a unicode \\\\\\u0075 escape.\"\ndelete = \"This string has a \\u007F delete control code.\"\nunitseparator = \"This string has a \\u001F unit separator control code.\"\n", 771);

    const Table expected = {{ std::string("backslash", 9), Value(std::string("This string has a \\ backslash character.", 40)) },{ std::string("backspace", 9), Value(std::string("This string has a \b backspace character.", 40)) },{ std::string("carriage", 8), Value(std::string("This string has a \r carriage return character.", 46)) },{ std::string("delete", 6), Value(std::string("This string has a \u007F delete control code.", 40)) },{ std::string("formfeed", 8), Value(std::string("This string has a \f form feed character.", 40)) },{ std::string("newline", 7), Value(std::string("This string has a \n new line character.", 39)) },{ std::string("notunicode1", 11), Value(std::string("This string does not have a unicode \\u escape.", 46)) },{ std::string("notunicode2", 11), Value(std::string("This string does not have a unicode \\u escape.", 46)) },{ std::string("notunicode3", 11), Value(std::string("This string does not have a unicode \\u0075 escape.", 50)) },{ std::string("notunicode4", 11), Value(std::string("This string does not have a unicode \\u escape.", 46)) },{ std::string("quote", 5), Value(std::string("This string has a \" quote character.", 36)) },{ std::string("tab", 3), Value(std::string("This string has a \t tab character.", 34)) },{ std::string("unitseparator", 13), Value(std::string("This string has a \u001F unit separator control code.", 48)) }};

    assert_parsed(toml, expected);
}
