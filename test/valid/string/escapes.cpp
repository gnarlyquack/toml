TEST(valid_string_tests, test_escapes)
{
    const string toml("backspace = \"This string has a \\b backspace character.\"\ntab = \"This string has a \\t tab character.\"\nnewline = \"This string has a \\n new line character.\"\nformfeed = \"This string has a \\f form feed character.\"\ncarriage = \"This string has a \\r carriage return character.\"\nquote = \"This string has a \\\" quote character.\"\nbackslash = \"This string has a \\\\ backslash character.\"\nnotunicode1 = \"This string does not have a unicode \\\\u escape.\"\nnotunicode2 = \"This string does not have a unicode \\u005Cu escape.\"\nnotunicode3 = \"This string does not have a unicode \\\\u0075 escape.\"\nnotunicode4 = \"This string does not have a unicode \\\\\\u0075 escape.\"\ndelete = \"This string has a \\u007F delete control code.\"\nunitseparator = \"This string has a \\u001F unit separator control code.\"\n", 771);

    const Table expected = {{ "backslash", Value(std::string("This string has a \\ backslash character.")) },{ "backspace", Value(std::string("This string has a \b backspace character.")) },{ "carriage", Value(std::string("This string has a \r carriage return character.")) },{ "delete", Value(std::string("This string has a \u007F delete control code.")) },{ "formfeed", Value(std::string("This string has a \f form feed character.")) },{ "newline", Value(std::string("This string has a \n new line character.")) },{ "notunicode1", Value(std::string("This string does not have a unicode \\u escape.")) },{ "notunicode2", Value(std::string("This string does not have a unicode \\u escape.")) },{ "notunicode3", Value(std::string("This string does not have a unicode \\u0075 escape.")) },{ "notunicode4", Value(std::string("This string does not have a unicode \\u escape.")) },{ "quote", Value(std::string("This string has a \" quote character.")) },{ "tab", Value(std::string("This string has a \t tab character.")) },{ "unitseparator", Value(std::string("This string has a \u001F unit separator control code.")) }};

    assert_parsed(toml, expected);
}
