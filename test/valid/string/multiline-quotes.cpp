TEST(valid_string_tests, test_multiline_quotes)
{
    const string toml("# Make sure that quotes inside multiline strings are allowed, including right\n# after the opening '''/\"\"\" and before the closing '''/\"\"\"\n\nlit_one = ''''one quote''''\nlit_two = '''''two quotes'''''\nlit_one_space = ''' 'one quote' '''\nlit_two_space = ''' ''two quotes'' '''\n\none = \"\"\"\"one quote\"\"\"\"\ntwo = \"\"\"\"\"two quotes\"\"\"\"\"\none_space = \"\"\" \"one quote\" \"\"\"\ntwo_space = \"\"\" \"\"two quotes\"\" \"\"\"\n\nmismatch1 = \"\"\"aaa'''bbb\"\"\"\nmismatch2 = '''aaa\"\"\"bbb'''\n\n# Three opening \"\"\", then one escaped \", then two \"\" (allowed), and then three\n# closing \"\"\"\nescaped = \"\"\"lol\\\"\"\"\"\"\"\n", 566);

    const Table expected = {{ std::string("escaped", 7), Value(std::string("lol\"\"\"", 6)) },{ std::string("lit_one", 7), Value(std::string("'one quote'", 11)) },{ std::string("lit_one_space", 13), Value(std::string(" 'one quote' ", 13)) },{ std::string("lit_two", 7), Value(std::string("''two quotes''", 14)) },{ std::string("lit_two_space", 13), Value(std::string(" ''two quotes'' ", 16)) },{ std::string("mismatch1", 9), Value(std::string("aaa'''bbb", 9)) },{ std::string("mismatch2", 9), Value(std::string("aaa\"\"\"bbb", 9)) },{ std::string("one", 3), Value(std::string("\"one quote\"", 11)) },{ std::string("one_space", 9), Value(std::string(" \"one quote\" ", 13)) },{ std::string("two", 3), Value(std::string("\"\"two quotes\"\"", 14)) },{ std::string("two_space", 9), Value(std::string(" \"\"two quotes\"\" ", 16)) }};

    assert_parsed(toml, expected);
}
