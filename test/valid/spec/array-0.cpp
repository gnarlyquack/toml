TEST(valid_spec_tests, test_array_0)
{
    const string toml("integers = [ 1, 2, 3 ]\ncolors = [ \"red\", \"yellow\", \"green\" ]\nnested_arrays_of_ints = [ [ 1, 2 ], [3, 4, 5] ]\nnested_mixed_array = [ [ 1, 2 ], [\"a\", \"b\", \"c\"] ]\nstring_array = [ \"all\", 'strings', \"\"\"are the same\"\"\", '''type''' ]\n\n# Mixed-type arrays are allowed\nnumbers = [ 0.1, 0.2, 0.5, 1, 2, 5 ]\ncontributors = [\n  \"Foo Bar <foo@example.com>\",\n  { name = \"Baz Qux\", email = \"bazqux@example.com\", url = \"https://example.com/bazqux\" }\n]\n", 437);

    const Table expected = {{ std::string("colors", 6), Value(Array({Value(std::string("red", 3)),Value(std::string("yellow", 6)),Value(std::string("green", 5))})) },{ std::string("contributors", 12), Value(Array({Value(std::string("Foo Bar <foo@example.com>", 25)),Value(Table({{ std::string("email", 5), Value(std::string("bazqux@example.com", 18)) },{ std::string("name", 4), Value(std::string("Baz Qux", 7)) },{ std::string("url", 3), Value(std::string("https://example.com/bazqux", 26)) }}))})) },{ std::string("integers", 8), Value(Array({Value(INT64_C(1)),Value(INT64_C(2)),Value(INT64_C(3))})) },{ std::string("nested_arrays_of_ints", 21), Value(Array({Value(Array({Value(INT64_C(1)),Value(INT64_C(2))})),Value(Array({Value(INT64_C(3)),Value(INT64_C(4)),Value(INT64_C(5))}))})) },{ std::string("nested_mixed_array", 18), Value(Array({Value(Array({Value(INT64_C(1)),Value(INT64_C(2))})),Value(Array({Value(std::string("a", 1)),Value(std::string("b", 1)),Value(std::string("c", 1))}))})) },{ std::string("numbers", 7), Value(Array({Value(0.1),Value(0.2),Value(0.5),Value(INT64_C(1)),Value(INT64_C(2)),Value(INT64_C(5))})) },{ std::string("string_array", 12), Value(Array({Value(std::string("all", 3)),Value(std::string("strings", 7)),Value(std::string("are the same", 12)),Value(std::string("type", 4))})) }};

    assert_parsed(toml, expected);
}
