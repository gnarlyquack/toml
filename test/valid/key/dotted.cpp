TEST(valid_key_tests, test_dotted)
{
    const string toml("# Note: this file contains literal tab characters.\n\nname.first = \"Arthur\"\n\"name\".'last' = \"Dent\"\n\nmany.dots.here.dot.dot.dot = 42\n\n# Space are ignored, and key parts can be quoted.\ncount.a       = 1\ncount . b     = 2\n\"count\".\"c\"   = 3\n\"count\" . \"d\" = 4\n'count'.'e'   = 5\n'count' . 'f' = 6\n\"count\".'g'   = 7\n\"count\" . 'h' = 8\ncount.'i'     = 9\ncount \t.\t 'j'\t   = 10\n\"count\".k     = 11\n\"count\" . l   = 12\n\n[tbl]\na.b.c = 42.666\n\n[a.few.dots]\npolka.dot = \"again?\"\npolka.dance-with = \"Dot\"\n\n[[arr]]\na.b.c=1\na.b.d=2\n\n[[arr]]\na.b.c=3\na.b.d=4\n", 535);

    const Table expected = {{ std::string("a", 1), Value(Table({{ std::string("few", 3), Value(Table({{ std::string("dots", 4), Value(Table({{ std::string("polka", 5), Value(Table({{ std::string("dance-with", 10), Value(std::string("Dot", 3)) },{ std::string("dot", 3), Value(std::string("again?", 6)) }})) }})) }})) }})) },{ std::string("arr", 3), Value(Array({Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(INT64_C(1)) },{ std::string("d", 1), Value(INT64_C(2)) }})) }})) }})),Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(INT64_C(3)) },{ std::string("d", 1), Value(INT64_C(4)) }})) }})) }}))})) },{ std::string("count", 5), Value(Table({{ std::string("a", 1), Value(INT64_C(1)) },{ std::string("b", 1), Value(INT64_C(2)) },{ std::string("c", 1), Value(INT64_C(3)) },{ std::string("d", 1), Value(INT64_C(4)) },{ std::string("e", 1), Value(INT64_C(5)) },{ std::string("f", 1), Value(INT64_C(6)) },{ std::string("g", 1), Value(INT64_C(7)) },{ std::string("h", 1), Value(INT64_C(8)) },{ std::string("i", 1), Value(INT64_C(9)) },{ std::string("j", 1), Value(INT64_C(10)) },{ std::string("k", 1), Value(INT64_C(11)) },{ std::string("l", 1), Value(INT64_C(12)) }})) },{ std::string("many", 4), Value(Table({{ std::string("dots", 4), Value(Table({{ std::string("here", 4), Value(Table({{ std::string("dot", 3), Value(Table({{ std::string("dot", 3), Value(Table({{ std::string("dot", 3), Value(INT64_C(42)) }})) }})) }})) }})) }})) },{ std::string("name", 4), Value(Table({{ std::string("first", 5), Value(std::string("Arthur", 6)) },{ std::string("last", 4), Value(std::string("Dent", 4)) }})) },{ std::string("tbl", 3), Value(Table({{ std::string("a", 1), Value(Table({{ std::string("b", 1), Value(Table({{ std::string("c", 1), Value(42.666) }})) }})) }})) }};

    assert_parsed(toml, expected);
}
