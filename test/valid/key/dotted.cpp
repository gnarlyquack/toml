TEST(valid_key_tests, test_dotted)
{
    const string toml("# Note: this file contains literal tab characters.\n\nname.first = \"Arthur\"\n\"name\".'last' = \"Dent\"\n\nmany.dots.here.dot.dot.dot = 42\n\n# Space are ignored, and key parts can be quoted.\ncount.a       = 1\ncount . b     = 2\n\"count\".\"c\"   = 3\n\"count\" . \"d\" = 4\n'count'.'e'   = 5\n'count' . 'f' = 6\n\"count\".'g'   = 7\n\"count\" . 'h' = 8\ncount.'i'     = 9\ncount \t.\t 'j'\t   = 10\n\"count\".k     = 11\n\"count\" . l   = 12\n\n[tbl]\na.b.c = 42.666\n\n[a.few.dots]\npolka.dot = \"again?\"\npolka.dance-with = \"Dot\"\n\n[[arr]]\na.b.c=1\na.b.d=2\n\n[[arr]]\na.b.c=3\na.b.d=4\n", 535);

    const Table expected = {{ "a", Value(Table({{ "few", Value(Table({{ "dots", Value(Table({{ "polka", Value(Table({{ "dance-with", Value(std::string("Dot")) },{ "dot", Value(std::string("again?")) }})) }})) }})) }})) },{ "arr", Value(Array({Value(Table({{ "a", Value(Table({{ "b", Value(Table({{ "c", Value(INT64_C(1)) },{ "d", Value(INT64_C(2)) }})) }})) }})),Value(Table({{ "a", Value(Table({{ "b", Value(Table({{ "c", Value(INT64_C(3)) },{ "d", Value(INT64_C(4)) }})) }})) }}))})) },{ "count", Value(Table({{ "a", Value(INT64_C(1)) },{ "b", Value(INT64_C(2)) },{ "c", Value(INT64_C(3)) },{ "d", Value(INT64_C(4)) },{ "e", Value(INT64_C(5)) },{ "f", Value(INT64_C(6)) },{ "g", Value(INT64_C(7)) },{ "h", Value(INT64_C(8)) },{ "i", Value(INT64_C(9)) },{ "j", Value(INT64_C(10)) },{ "k", Value(INT64_C(11)) },{ "l", Value(INT64_C(12)) }})) },{ "many", Value(Table({{ "dots", Value(Table({{ "here", Value(Table({{ "dot", Value(Table({{ "dot", Value(Table({{ "dot", Value(INT64_C(42)) }})) }})) }})) }})) }})) },{ "name", Value(Table({{ "first", Value(std::string("Arthur")) },{ "last", Value(std::string("Dent")) }})) },{ "tbl", Value(Table({{ "a", Value(Table({{ "b", Value(Table({{ "c", Value(42.666) }})) }})) }})) }};

    assert_parsed(toml, expected);
}
