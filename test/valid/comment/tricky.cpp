TEST(valid_comment_tests, test_tricky)
{
    const string toml("[section]#attached comment\n#[notsection]\none = \"11\"#cmt\ntwo = \"22#\"\nthree = '#'\n\nfour = \"\"\"# no comment\n# nor this\n#also not comment\"\"\"#is_comment\n\nfive = 5.5#66\nsix = 6#7\n8 = \"eight\"\n#nine = 99\nten = 10e2#1\neleven = 1.11e1#23\n\n[\"hash#tag\"]\n\"#!\" = \"hash bang\"\narr3 = [ \"#\", '#', \"\"\"###\"\"\" ]\narr4 = [ 1,# 9, 9,\n2#,9\n,#9\n3#]\n,4]\narr5 = [[[[#[\"#\"],\n[\"#\"]]]]#]\n]\ntbl1 = { \"#\" = '}#'}#}}\n\n\n", 385);

    const Table expected = {{ std::string("hash#tag", 8), Value(Table({{ std::string("#!", 2), Value(std::string("hash bang", 9)) },{ std::string("arr3", 4), Value(Array({Value(std::string("#", 1)),Value(std::string("#", 1)),Value(std::string("###", 3))})) },{ std::string("arr4", 4), Value(Array({Value(INT64_C(1)),Value(INT64_C(2)),Value(INT64_C(3)),Value(INT64_C(4))})) },{ std::string("arr5", 4), Value(Array({Value(Array({Value(Array({Value(Array({Value(Array({Value(std::string("#", 1))}))}))}))}))})) },{ std::string("tbl1", 4), Value(Table({{ std::string("#", 1), Value(std::string("}#", 2)) }})) }})) },{ std::string("section", 7), Value(Table({{ std::string("8", 1), Value(std::string("eight", 5)) },{ std::string("eleven", 6), Value(11.1) },{ std::string("five", 4), Value(5.5) },{ std::string("four", 4), Value(std::string("# no comment\n# nor this\n#also not comment", 41)) },{ std::string("one", 3), Value(std::string("11", 2)) },{ std::string("six", 3), Value(INT64_C(6)) },{ std::string("ten", 3), Value(1000.0) },{ std::string("three", 5), Value(std::string("#", 1)) },{ std::string("two", 3), Value(std::string("22#", 3)) }})) }};

    assert_parsed(toml, expected);
}
